# Workflow name
name: swift

# Triggers for the workflow
on:
  push:
    # Run on pushes to main, master, or develop branches
    branches: [ main, master, develop ]
  pull_request:
    # Run on pull requests targeting main, master, or develop branches
    branches: [ main, master, develop ]

# Jobs to run
jobs:
  # Job for building and testing on multiple platforms and Swift versions
  build-and-test:
    # Name displayed on GitHub for this job matrix instance
    name: Swift ${{ matrix.swift }} on ${{ matrix.os }}
    # Runner environment for the job
    runs-on: ${{ matrix.os }} # Consider changing ubuntu-latest to ubuntu-22.04 if issues persist
    strategy:
      # Don't cancel other jobs in the matrix if one fails
      fail-fast: false
      # Define the matrix configurations
      matrix:
        os: [ubuntu-latest, macos-latest] # Platforms to run on
        swift: ["5.9"] # Swift versions to test

    # Steps to execute within the job
    steps:
    # 1. Check out the repository code
    - name: Check out repository code
      uses: actions/checkout@v4

    # 2. (Linux Only) Ensure GPG tools are installed and configure dirmngr
    - name: Ensure GPG/dirmngr and Configure (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update && sudo apt-get install -y gpg dirmngr
        mkdir -p ~/.gnupg
        chmod 700 ~/.gnupg
        echo "disable-ipv6" >> ~/.gnupg/dirmngr.conf
        echo "GPG and dirmngr installed, IPv6 disabled for dirmngr."

    # 3. (Linux Only) DEBUG STEP: Manually download Swift keys to check download process
    - name: Debug Download Swift Keys (Linux)
      if: runner.os == 'Linux'
      run: |
        echo "Attempting to download Swift keys manually..."
        # Use curl with verbose output (-v) and fail-fast (-f) to diagnose download
        curl -v -fSL https://swift.org/keys/all-keys.asc -o swiftkeys.asc
        echo "Curl download exit code: $?"
        echo "--- Start of downloaded keys (first 10 lines) ---"
        head swiftkeys.asc || echo "File empty or head failed"
        echo "--- End of downloaded keys ---"
        # Try showing keys from the downloaded file using gpg
        echo "--- GPG Check of Downloaded File ---"
        gpg --show-keys swiftkeys.asc || echo "GPG cannot parse manually downloaded file"
        echo "--- Debug Step Complete ---"

    # 4. Set up the specified Swift version using the official action
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ matrix.swift }}

    # 5. Verify the Swift installation
    - name: Verify Swift installation
      run: swift --version

    # 6. (Linux Only) Install D-Bus dependencies required for building/testing
    - name: Install D-Bus dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libdbus-1-dev dbus
        eval $(dbus-launch --auto-syntax)
        echo "D-Bus dependencies installed and session launched."

    # 7. (macOS Only) Install D-Bus runtime
    - name: Install D-Bus (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install dbus
        echo "D-Bus installed via Homebrew (service not started)."

    # 8. Build the Swift package in release configuration
    - name: Build Package
      run: swift build -c release -v # Verbose output

    # 9. (Linux Only) Run tests
    - name: Run Tests (Linux)
      if: runner.os == 'Linux'
      run: swift test -v # Verbose output

    # 10. (macOS Only) Skip tests and explain why
    - name: Explain Skipped Tests (macOS)
      if: runner.os == 'macOS'
      run: echo "Skipping tests on macOS as they may depend on a D-Bus session environment."