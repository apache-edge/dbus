# Workflow name
name: swift

# Triggers for the workflow
on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

# Jobs to run
jobs:
  build-and-test:
    name: Swift ${{ matrix.swift }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }} # Consider ubuntu-22.04 if latest still has issues
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        swift: ["5.9"]

    steps:
    # 1. Check out repository code
    - name: Check out repository code
      uses: actions/checkout@v4

    # 2. (Linux Only) Ensure GPG, Gzip, Curl tools are installed and configure dirmngr
    - name: Ensure GPG/Gzip/Curl and Configure (Linux)
      if: runner.os == 'Linux'
      run: |
        # Update package lists and install necessary tools
        # Use 'gzip' package which provides the 'gunzip' command
        sudo apt-get update && sudo apt-get install -y gpg dirmngr gzip curl
        # Create GPG directory and configure dirmngr
        mkdir -p ~/.gnupg
        chmod 700 ~/.gnupg
        echo "disable-ipv6" >> ~/.gnupg/dirmngr.conf
        echo "GPG, dirmngr, gzip, curl installed, IPv6 disabled for dirmngr."

    # 3. (Linux Only) WORKAROUND: Manually fetch, decompress, and import Swift keys
    - name: Manually Fetch and Import Swift Keys (Linux Workaround)
      if: runner.os == 'Linux'
      run: |
        echo "Manually downloading, decompressing, and importing Swift keys..."
        # Download (-fsSL), decompress (gunzip), import (gpg --import -)
        curl -fsSL https://swift.org/keys/all-keys.asc | gunzip | gpg --import -
        echo "Import process completed."
        # Verify key import (recommended)
        if gpg --list-keys 'Swift Builders'; then
          echo "Swift Builders key successfully imported."
        else
          echo "WARNING: Swift Builders key not found after import attempt!" >&2
          # Optionally fail the job if key import is critical: exit 1
        fi

    # 4. Set up the specified Swift version using the official action
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ matrix.swift }}

    # 5. Verify the Swift installation
    - name: Verify Swift installation
      run: swift --version

    # 6. (Linux Only) Install D-Bus dependencies
    - name: Install D-Bus dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libdbus-1-dev dbus
        eval $(dbus-launch --auto-syntax)
        echo "D-Bus dependencies installed and session launched."

    # 7. (macOS Only) Install D-Bus runtime
    - name: Install D-Bus (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install dbus
        echo "D-Bus installed via Homebrew (service not started)."

    # 8. Build the Swift package
    - name: Build Package
      run: swift build -c release -v

    # 9. (Linux Only) Run tests
    - name: Run Tests (Linux)
      if: runner.os == 'Linux'
      run: swift test -v

    # 10. (macOS Only) Skip tests
    - name: Explain Skipped Tests (macOS)
      if: runner.os == 'macOS'
      run: echo "Skipping tests on macOS as they may depend on a D-Bus session environment."